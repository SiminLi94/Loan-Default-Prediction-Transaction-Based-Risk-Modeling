# -*- coding: utf-8 -*-
"""Predictive_modelingProjectSolution.ipynb

Automatically generated by Colaboratory.

"""
import pandas as pd

# Create a folder CS505DataMiningFinalProject on your google drive,then upload dataset_new.pkl onto the folder 
# Uncomment below 3 lines of code if running on Google colab

#from google.colab import drive
#drive.mount('/content/drive')
#data = pd.read_pickle(r'/content/drive/My Drive/CS505DataMiningFinalProject/dataset_new.pkl')

#Comment below line of code if running on Google Colab
data = pd.read_pickle(r'dataset_new.pkl')
data

import numpy as np
import matplotlib.pyplot as plt

min=99999
max=-99999
for i in range(data.shape[0]):
  minnn=np.amin(data[3][i][1])
  maxxx=np.amax(data[3][i][1])
  if minnn<min:
    min=minnn
  if maxxx>max:
    max=maxxx

txnDays=int(max-min+1)
dataset=np.zeros((data.shape[0],16*10*3+1))
targetSize=10500
target=np.zeros(targetSize)

from datetime import datetime
for i in range(data.shape[0]):
  transaction_amount=data[2][i][1]  
  transaction_date=data[1][i][1]
  loan_date=data[5][i][1]
  loan_amount=data[4][i][1]

  dataset[i][-1]=loan_amount
  txnGrps=dict()
  for j in range(len(transaction_amount)):
    amount=transaction_amount[j][0]
    days=(datetime.strptime(loan_date,'%Y-%m-%d')-datetime.strptime(transaction_date[j],'%Y-%m-%d')).days
    dIndex=int(days/10)
    if dIndex>=9:
      dIndex=9
    aIndex=0
    if amount<=-50000:
      aIndex=0
    elif amount>-50000 and amount<=-20000:
      aIndex=1
    elif amount>-20000 and amount<=-10000:
      aIndex=2
    elif amount>-10000 and amount<=-5000:
      aIndex=3
    elif amount>-5000 and amount<=-2000:
      aIndex=4
    elif amount>-2000 and amount<=-1000:
      aIndex=5
    elif amount>-1000 and amount<=-500:
      aIndex=6
    elif amount>-500 and amount<=0:
      aIndex=7
    elif amount>0 and amount<=500:
      aIndex=8
    elif amount>500 and amount<=1000:
      aIndex=9
    elif amount>1000 and amount<=2000:
      aIndex=10
    elif amount>2000 and amount<=5000:
      aIndex=11
    elif amount>5000 and amount<=10000:
      aIndex=12
    elif amount>10000 and amount<=20000:
      aIndex=13
    elif amount>20000 and amount<=50000:
      aIndex=14
    else:
      aIndex=15
    idx=dIndex*16+aIndex  
    if idx not in txnGrps:
      txnGrps[idx]=[]
    txnGrps[idx].append(amount)
  for d in range(9,-1,-1):#rfm    
 
    for a in range(15,-1,-1):
      k=d*16+a
      if k in txnGrps and len(txnGrps[k])>0:
        v=txnGrps[k]

        if int(d)==9:
          dataset[i][k*3]=0
          dataset[i][k*3+1]=len(v)
          dataset[i][k*3+2]=np.sum(v)
        else:
          dataset[i][k*3]=0
          dataset[i][k*3+1]=dataset[i][(k+1)*3+1]+len(v)
          dataset[i][k*3+2]=dataset[i][(k+1)*3+2]+np.sum(v)
      else:
        if int(d)==9:
          dataset[i][k*3]=1
          dataset[i][k*3+1]=0
          dataset[i][k*3+2]=0
        else:
          dataset[i][k*3]=dataset[i][(k+1)*3]+1
          dataset[i][k*3+1]=dataset[i][(k+1)*3+1]
          dataset[i][k*3+2]=dataset[i][(k+1)*3+2]



for i in range(targetSize):
  isDefault=data[6][i][1]
  target[i]=isDefault

from sklearn.model_selection import train_test_split

X_train=dataset[0:targetSize,:]
y_train=target[0:targetSize]
X_test=dataset[targetSize-500:,:]

X_test.shape

import matplotlib.pyplot as plt
from sklearn import metrics
from sklearn.metrics import roc_curve, auc

#from sklearn.preprocessing import StandardScaler
#scaler = StandardScaler()  
#scaler.fit(X_train)
#X_train = scaler.transform(X_train)
#X_test = scaler.transform(X_test)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
rf = RandomForestClassifier(
    n_estimators=100,
    criterion="gini",
    max_depth=None,
    max_features=X_train.shape[1],
    max_leaf_nodes=None,
    min_impurity_decrease=0.0,
    min_impurity_split=None,
    bootstrap=True,
    oob_score=False,
    n_jobs=1,
    random_state=42,
    verbose=0,
    warm_start=False,
    class_weight=None,
)
rf.fit(X_train, y_train)


pr1=rf.predict_proba(X_test)

import csv
solution_rows=[]
for i in range(5000):
  idx=i+10000
  customerId=data[0][idx][1]
  solution_rows.append((customerId,pr1[i,1]))
